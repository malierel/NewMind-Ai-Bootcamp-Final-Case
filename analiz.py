# -*- coding: utf-8 -*-
"""newmindsonnnnn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gSubhCiY8iIdqcvfcQtr8HWnDgCHXyid
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from scipy import stats
import sys

# Tüm çıktıyı bir dosyaya yönlendirmek için
sys.stdout = open('rapor.txt', 'w')

# Grafiklerin notebook içinde görüntülenmesi için
# %matplotlib inline

# Genel Grafik Ayarları: Daha okunabilir grafikler için ayarları belirliyoruz
plt.rcParams.update({
    'figure.figsize': (14, 8),  # Tüm grafikler için varsayılan figür boyutu
    'axes.titlesize': 16,  # Başlık boyutu
    'axes.labelsize': 14,  # Eksen etiket boyutu
    'xtick.labelsize': 12,  # X ekseni yazı boyutu
    'ytick.labelsize': 12,  # Y ekseni yazı boyutu
    'legend.fontsize': 12,  # Lejant yazı boyutu
    'axes.grid': True,  # Varsayılan olarak grid ekleyelim
    'grid.alpha': 0.5,  # Izgaraların şeffaflık değeri
    'grid.linestyle': '--',  # Izgaraların stili
    'grid.linewidth': 0.7  # Izgaraların kalınlığı
})

# Veri setlerini yükleyelim
musteri_verisi = pd.read_csv('musteri_verisi_5000_utf8.csv')
satis_verisi = pd.read_csv('satis_verisi_5000.csv')

# İlk satırlara göz atarak veri setlerinin genel yapısını inceleyelim
print("Müşteri Verisi İlk 5 Satır:\n", musteri_verisi.head())
print("\nSatış Verisi İlk 5 Satır:\n", satis_verisi.head())

# Veri setleri hakkında genel bilgi almak için bilgi metodunu kullanıyoruz
print("\nMüşteri Verisi Bilgileri:")
musteri_verisi.info()

print("\nSatış Verisi Bilgileri:")
satis_verisi.info()

# Eksik verilerin sayısını tespit edelim
print("\nMüşteri Verisi Eksik Değerler:\n", musteri_verisi.isnull().sum())
print("\nSatış Verisi Eksik Değerler:\n", satis_verisi.isnull().sum())

# Eksik verileri doldurma
# Müşteri verisindeki eksik değerleri dolduralım
# "yas" sütunundaki eksik değerleri medyan ile dolduruyoruz
if musteri_verisi['yas'].isnull().sum() > 0:
    musteri_verisi['yas'] = musteri_verisi['yas'].fillna(musteri_verisi['yas'].median())

# "sehir" sütunundaki eksik değerleri "Bilinmeyen" olarak dolduruyoruz
if musteri_verisi['sehir'].isnull().sum() > 0:
    musteri_verisi['sehir'] = musteri_verisi['sehir'].fillna('Bilinmeyen')

# Satış verisindeki eksik değerleri dolduralım
# "fiyat" sütunundaki eksik değerleri medyan ile dolduruyoruz
satis_verisi['fiyat'] = pd.to_numeric(satis_verisi['fiyat'], errors='coerce')
if satis_verisi['fiyat'].isnull().sum() > 0:
    satis_verisi['fiyat'] = satis_verisi['fiyat'].fillna(satis_verisi['fiyat'].median())

# "adet" sütunundaki eksik değerleri 1 ile dolduruyoruz
if satis_verisi['adet'].isnull().sum() > 0:
    satis_verisi['adet'] = satis_verisi['adet'].fillna(1)

# Eksik değerler doldurulduktan sonra tekrar kontrol edelim
print("\nEksik Değerler Doldurulduktan Sonra Müşteri Verisi:\n", musteri_verisi.isnull().sum())
print("\nEksik Değerler Doldurulduktan Sonra Satış Verisi:\n", satis_verisi.isnull().sum())

# Aykırı değerlerin tespiti ve temizlenmesi
# Z-skoru yöntemi kullanarak fiyat ve harcama miktarı gibi sayısal sütunlardaki aykırı değerleri tespit ediyoruz
threshold = 3

# Satış verisinde "fiyat" sütunundaki aykırı değerlerin tespiti
satis_verisi['fiyat'] = pd.to_numeric(satis_verisi['fiyat'], errors='coerce')  # Fiyat sütununu sayısal formata çevirelim
z_scores_fiyat = np.abs(stats.zscore(satis_verisi['fiyat'].dropna()))
satis_verisi = satis_verisi.loc[z_scores_fiyat < threshold]
print(f"\nAykırı Değerlerin Temizlenmesinden Sonra Satış Verisi Boyutu: {satis_verisi.shape}")

# Müşteri verisinde "harcama_miktari" sütunundaki aykırı değerlerin tespiti
z_scores_harcama = np.abs(stats.zscore(musteri_verisi['harcama_miktari'].dropna()))
musteri_verisi = musteri_verisi.loc[z_scores_harcama < threshold]
print(f"\nAykırı Değerlerin Temizlenmesinden Sonra Müşteri Verisi Boyutu: {musteri_verisi.shape}")

# Birleştirme
birlesik_veri = pd.merge(satis_verisi, musteri_verisi, on='musteri_id', how='inner')
print("\nBirleşik Veri İlk 5 Satır:\n", birlesik_veri.head())

# Tarih sütunlarının kontrol edilmesi ve dönüştürülmesi
print("\nSatış Verisi Tarih Kolonundaki Format Kontrolü:")
try:
    birlesik_veri['tarih'] = pd.to_datetime(birlesik_veri['tarih'], format='%Y-%m-%d', errors='raise')
    print("Tüm tarihler aynı formatta ve uygun şekilde dönüştürüldü.")
except ValueError:
    print("Tarih formatında hatalar var, uygun formata dönüştürülemedi.")
    birlesik_veri['tarih'] = pd.to_datetime(birlesik_veri['tarih'], errors='coerce')
    print("Formatı yanlış olan tarihler NaT olarak işaretlendi.")

# Formatı hatalı olan tarihler varsa, bunları kontrol edelim
tarih_hatalari = birlesik_veri['tarih'].isna().sum()
print(f"\nFormatı hatalı olan tarih sayısı: {tarih_hatalari}")

# Hatalı tarihler temizlendikten sonra veri setini güncelleyelim
birlesik_veri = birlesik_veri.dropna(subset=['tarih'])
print(f"\nTarih formatı düzeltilmiş ve hatalı tarihler çıkarılmış satış verisi boyutu: {birlesik_veri.shape}")

# Toplam satış sütununu fiyat * adet olarak güncelleme
birlesik_veri['toplam_satis'] = birlesik_veri['fiyat'] * birlesik_veri['adet']
print("\nToplam satış sütunu fiyat * adet olarak güncellendi.")

# Sayısal sütunların istatistiksel özeti
print("\nSatış Verisi Sayısal Sütunların İstatistiksel Özeti:\n", satis_verisi.describe())
print("\nMüşteri Verisi Sayısal Sütunların İstatistiksel Özeti:\n", musteri_verisi.describe())

# Görev 3: Kategorisel ve Sayısal Analiz (%25)
# Ürün kategorilerine göre toplam satış miktarını ve her kategorinin tüm satışlar içindeki oranını hesaplayalım
kategori_toplam_satis = birlesik_veri.groupby('kategori')['toplam_satis'].sum().sort_values(ascending=False)
kategori_oranlari = (kategori_toplam_satis / kategori_toplam_satis.sum()) * 100

print("\nÜrün Kategorilerine Göre Toplam Satış Miktarı:\n", kategori_toplam_satis)
print("\nÜrün Kategorilerinin Tüm Satışlar İçindeki Oranı (%):\n", kategori_oranlari)

# Kategorilere göre toplam satış miktarını görselleştirelim
plt.figure()
kategori_toplam_satis.plot(kind='bar', color='skyblue')
plt.title('Ürün Kategorilerine Göre Toplam Satış Miktarı')
plt.xlabel('Kategori')
plt.ylabel('Toplam Satış')
plt.xticks(rotation=45)
plt.show()

# Ürün kategorilerinin toplam satış içindeki oranlarının görselleştirilmesi
plt.figure()
kategori_oranlari.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=sns.color_palette('pastel'))
plt.title('Ürün Kategorilerinin Toplam Satışlar İçindeki Oranı')
plt.ylabel('')
plt.tight_layout()
plt.show()

# Müşterilerin yaş gruplarına göre satış eğilimlerini analiz edelim
bins = [18, 25, 35, 50, 100]
labels = ['18-25', '26-35', '36-50', '50+']
musteri_verisi['yas_grubu'] = pd.cut(musteri_verisi['yas'], bins=bins, labels=labels, right=False)
yas_grubu_satis = birlesik_veri.merge(musteri_verisi[['musteri_id', 'yas_grubu']], on='musteri_id')
yas_grubu_toplam_satis = yas_grubu_satis.groupby('yas_grubu', observed=True)['toplam_satis'].sum()
print("\nYaş Gruplarına Göre Toplam Satış Miktarı:\n", yas_grubu_toplam_satis)

# Yaş gruplarına göre toplam satış miktarını görselleştirelim
plt.figure()
yas_grubu_toplam_satis.plot(kind='bar', color='lightgreen')
plt.title('Yaş Gruplarına Göre Toplam Satış Miktarı')
plt.xlabel('Yaş Grubu')
plt.ylabel('Toplam Satış')
plt.xticks(rotation=0)
plt.grid(visible=True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

# Kadın ve erkek müşterilerin harcama miktarlarını karşılaştıralım
cinsiyet_harcama = musteri_verisi.groupby('cinsiyet')['harcama_miktari'].sum()
print("\nCinsiyete Göre Toplam Harcama Miktarı:\n", cinsiyet_harcama)

# Cinsiyete göre harcama miktarını görselleştirelim
plt.figure()
cinsiyet_harcama.plot(kind='bar', color=['lightblue', 'lightpink'])
plt.title('Cinsiyete Göre Toplam Harcama Miktarı')
plt.xlabel('Cinsiyet')
plt.ylabel('Toplam Harcama Miktarı')
plt.xticks(rotation=0)
plt.grid(visible=True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

# Görev 4: İleri Düzey Veri Manipülasyonu (%25)
# Müşterilerin şehir bazında toplam harcama miktarını bulalım
sehir_harcama = musteri_verisi.groupby('sehir')['harcama_miktari'].sum().sort_values(ascending=False)
print("\nŞehir Bazında Toplam Harcama Miktarı:\n", sehir_harcama)

# Şehir bazında toplam harcama miktarının görselleştirilmesi
plt.figure()
sehir_harcama.plot(kind='bar', color='teal')
plt.title('Şehir Bazında Toplam Harcama Miktarı')
plt.xlabel('Şehir')
plt.ylabel('Toplam Harcama Miktarı')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Her Bir Ürün İçin Ortalama Satış Artışı Oranı
urun_aylik_satis = birlesik_veri.set_index('tarih').groupby(['ürün_kodu', pd.Grouper(freq='ME')])['adet'].sum().reset_index()
urun_aylik_satis['aylik_degisimi'] = urun_aylik_satis.groupby('ürün_kodu')['adet'].pct_change() * 100
urun_ortalama_degisimi = urun_aylik_satis.groupby('ürün_kodu')['aylik_degisimi'].mean()
print("\nHer Bir Ürün İçin Ortalama Satış Artışı Oranı (%):\n", urun_ortalama_degisimi)

# Kategorilere Göre Aylık Toplam Satış ve Değişim Oranı
kategori_aylik_satis = birlesik_veri.set_index('tarih').groupby(['kategori', pd.Grouper(freq='ME')])['toplam_satis'].sum().reset_index()
kategori_aylik_satis['aylik_degisimi'] = kategori_aylik_satis.groupby('kategori')['toplam_satis'].pct_change() * 100

# Kategorilere göre aylık satışların değişim oranlarının ayrı ayrı görselleştirilmesi
for kategori in kategori_aylik_satis['kategori'].unique():
    plt.figure()
    plt.plot(
        kategori_aylik_satis[kategori_aylik_satis['kategori'] == kategori]['tarih'],
        kategori_aylik_satis[kategori_aylik_satis['kategori'] == kategori]['aylik_degisimi'],
        marker='o'
    )
    plt.title(f'{kategori} Kategorisi Aylık Satış Değişim Oranı')
    plt.xlabel('Tarih')
    plt.ylabel('Değişim Oranı (%)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Görev 5: Ekstra (BONUS)
# Pareto Analizi: Satışların %80'ini oluşturan ürünleri belirleyin (80/20 kuralı) ve bu ürünleri grafikte gösterin
toplam_satis_urun = birlesik_veri.groupby('ürün_kodu')['toplam_satis'].sum().sort_values(ascending=False)
toplam_satis_urun_cumsum = toplam_satis_urun.cumsum() / toplam_satis_urun.sum() * 100
pareto_limit = toplam_satis_urun_cumsum[toplam_satis_urun_cumsum <= 80]

print("\nSatışların %80'ini Oluşturan Ürünler:\n", pareto_limit)

# Pareto analizinin görselleştirilmesi
plt.figure()
plt.bar(pareto_limit.index, pareto_limit, color='purple')
plt.title("Satışların %80'ini Oluşturan Ürünler (Pareto Analizi)")
plt.xlabel('Ürün Kodu')
plt.ylabel('Kümülatif Satış Oranı (%)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Cohort Analizi: Müşterilerin satın alım alışkanlıklarını analiz etmek
birlesik_veri['ilk_satin_alma'] = birlesik_veri.groupby('musteri_id')['tarih'].transform('min')
birlesik_veri['cohort_ay'] = birlesik_veri['ilk_satin_alma'].dt.to_period('M')
birlesik_veri['siparis_ay'] = birlesik_veri['tarih'].dt.to_period('M')

# Cohort tablosunu oluşturma
cohort_data = birlesik_veri.groupby(['cohort_ay', 'siparis_ay']).agg(n_musteri=('musteri_id', 'nunique')).reset_index()
cohort_pivot = cohort_data.pivot(index='cohort_ay', columns='siparis_ay', values='n_musteri')

# Cohort analizinin görselleştirilmesi
plt.figure()
sns.heatmap(cohort_pivot, annot=True, fmt='.0f', cmap='Blues')
plt.title('Cohort Analizi: Müşteri Sadakati')
plt.xlabel('Sipariş Ayı')
plt.ylabel('Cohort Ayı')
plt.tight_layout()
plt.show()

# Tahmin Modeli: Aylık Satış Tahmini
birlesik_veri['ay'] = birlesik_veri['tarih'].dt.to_period('M')
monthly_sales = birlesik_veri.groupby('ay')['toplam_satis'].sum().reset_index()
monthly_sales['ay'] = monthly_sales['ay'].astype(str)
monthly_sales['ay'] = pd.to_datetime(monthly_sales['ay'])

# Özellik ve hedef değişkenlerin belirlenmesi
X = monthly_sales[['ay']]
X = X.assign(ay=X['ay'].map(pd.Timestamp.toordinal))
y = monthly_sales['toplam_satis']

# Veriyi eğitim ve test setlerine ayırma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Modelin oluşturulması ve eğitimi
lr = LinearRegression()
lr.fit(X_train, y_train)

# Test verisi üzerinde tahmin yapma
y_pred = lr.predict(X_test)

# Modelin performansını değerlendirme
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"\nRegresyon Modeli Performansı:")
print(f"Mean Squared Error (MSE): {mse}")
print(f"R-Kare (R²): {r2}")

# Çıktı yönlendirmesini kapat ve eski haline getir
sys.stdout.close()
sys.stdout = sys.__stdout__